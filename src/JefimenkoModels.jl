module JefimenkoModels
    import Meshes
    
    using Unitful, UnitfulCoordinateSystems
    using Unitful.DefaultSymbols: W, A, V, C, m, s, rad
    using PhysicalConstants.CODATA2018: c_0, Œµ_0, Œº_0
    using ForwardDiff, Integrals, LinearAlgebra, StaticArrays

    __DEFAULT_RTOL = sqrt(eps())

    ###########################################################################
    #                     DATA STRUCTURES & COMMON DEFAULTS
    ###########################################################################

    # Data structures
    include("structs.jl")
    export RadiationSource

    include("accessors.jl")

    CLASSICAL_VACUUM = let
        Œµ‚ÇÄ = uconvert((A*s)/(V*m), float(Œµ_0))
        Œº‚ÇÄ = uconvert((V*s)/(A*m), float(Œº_0))
        c‚ÇÄ = uconvert(m/s, float(c_0))
        PropagationMedia_Simple(Œµ‚ÇÄ, Œº‚ÇÄ, c‚ÇÄ)
    end

    NULL_CHARGE(rÃÑ::AbstractCoordinate, t_s::Real) = 0
    NULL_CURRENT(rÃÑ::AbstractCoordinate, t_s::Real) = StaticArrays.SVector(0, 0, 0)
    
    export CLASSICAL_VACUUM, NULL_CHARGE, NULL_CURRENT

    ###########################################################################
    #                     RETARDED-TIME CALCULATIONS
    ###########################################################################

    """
        t‚Ä≤(rÃÑ::AbstractCoordinate, t:Time, rÃÑ‚Ä≤::Coordinate, c::Quantity)

    Calculate the retarded-time at a source point `rÃÑ‚Ä≤` for an observer at the space-time
    point (`rÃÑ`,`t`) through a medium with speed of light `c`.

    # Arguments
    - `rÃÑ::UnitfulCoordinateSystems.AbstractCoordinate`: spatial location of the observation point
    - `t::Unitful.Time`: time at the observation point
    - `rÃÑ‚Ä≤::UnitfulCoordinateSystems.AbstractCoordinate`: spatial location of the source point
    - `c::Quantity`: Unitful speed of light in the medium between rÃÑ‚Ä≤ and rÃÑ
    """
    function t‚Ä≤(rÃÑ::AbstractCoordinate, t::Unitful.Time, rÃÑ‚Ä≤::AbstractCoordinate, c::Quantity)::Unitful.Time
        return (t - (norm(rÃÑ-rÃÑ‚Ä≤)/c))
    end

    """
        t‚Ä≤(rÃÑ::Coordinate, t:Time, rÃÑ‚Ä≤::Coordinate, media::PropagationMedia)

    Calculate the retarded-time at a source point `rÃÑ‚Ä≤` for an observer at the space-time
    point (`rÃÑ`,`t`) through a `propagation medium`.

    # Arguments
    - `rÃÑ::UnitfulCoordinateSystems.Coordinate`: spatial location of the observation point
    - `t::Unitful.Time`: time at the observation point
    - `rÃÑ‚Ä≤::UnitfulCoordinateSystems.Coordinate`: spatial location of the source point
    - `media::PropagationMedia`: properties of the medium between rÃÑ‚Ä≤ and rÃÑ
    """
    function t‚Ä≤(rÃÑ::AbstractCoordinate, t::Unitful.Time, rÃÑ‚Ä≤::AbstractCoordinate, media::PropagationMedia_Simple)::Unitful.Time
        return t‚Ä≤(rÃÑ, t, rÃÑ‚Ä≤, media.c)
    end

    function t‚Ä≤(rÃÑ::AbstractCoordinate, t::Unitful.Time, rÃÑ‚Ä≤::AbstractCoordinate, media::PropagationMedia_DiagonallyAnisotropic)::Unitful.Time
        ŒîrÃÑ = SVector(rÃÑ - rÃÑ‚Ä≤)
        Œît = norm(media.c^-1 * ŒîrÃÑ) |> unit(t)
        return (t - Œît)
    end

    export t‚Ä≤

    ###########################################################################
    #                     EM FIELD CALCULATIONS
    ###########################################################################

    """
        H(rÃÑ::AbstractCoordinate, t::Time, model::JefimenkoModel; rtol=sqrt(eps))

    Calculate the predicted electric field ùêá observed at space-time point (`rÃÑ`,`t`) using
    the electric Jefimenko equation for a particular `model`. Calculate the integral using
    a specified `relative tolerance`.

    # Arguments
    - `rÃÑ::UnitfulCoordinateSystems.AbstractCoordinate`: spatial location of the observation point
    - `t::Unitful.Time`: time at which the electric field is observed
    - `model::JefimenkoModel`: model of the transmitting source and propagation media

    # Keywords
    - `rtol::Real`: relative tolerance at which to solve the integral (optional)
    """
    function E(rÃÑ::AbstractCoordinate, t::Unitful.Time, model::JefimenkoModel; rtol=__DEFAULT_RTOL)
        # Superimpose the contributions of the E(rÃÑ,t) produced by each source in model
        E_contrib(source) = __E(rÃÑ, t, source, model.media; rtol=rtol)
        return mapreduce(E_contrib, +, model.sources)
    end

    """
        H(rÃÑ::AbstractCoordinate, t::Time, model::JefimenkoModel; rtol=sqrt(eps))

    Calculate the predicted magnetic field ùêá observed at space-time point (`rÃÑ`,`t`) using
    the magnetic Jefimenko equation for a particular `model`. Calculate the integral using
    a specified `relative tolerance`.

    # Arguments
    - `rÃÑ::UnitfulCoordinateSystems.AbstractCoordinate`: spatial location of the observation point
    - `t::Unitful.Time`: time at which the field is observed
    - `model::JefimenkoModel`: model of the transmitting source and propagation media

    # Keywords
    - `rtol::Real`: relative tolerance at which to solve the integral (optional)
    """
    function H(rÃÑ::AbstractCoordinate, t::Unitful.Time, model::JefimenkoModel; rtol=__DEFAULT_RTOL)
        # Superimpose the contributions of the ùêá(rÃÑ,t) produced by each source in model
        H_contrib(source) = __H(rÃÑ, t, source, model.media; rtol=rtol)
        return mapreduce(H_contrib, +, model.sources) 
    end

    """
        P(rÃÑ::AbstractCoordinate, t::Time, model::JefimenkoModel; rtol=sqrt(eps))

    Calculate the predicted Poynting vector ùêè observed at space-time point (`rÃÑ`,`t`) using
    the electric and magnetic Jefimenko equations for a particular `model`. Calculate the
    integrals using a specified `relative tolerance`.

    # Arguments
    - `rÃÑ::UnitfulCoordinateSystems.AbstractCoordinate`: spatial location of the observation point
    - `t::Unitful.Time`: time at which the field is observed
    - `model::JefimenkoModel`: model of the transmitting source and propagation media

    # Keywords
    - `rtol::Real`: relative tolerance at which to solve the integral (optional)
    """
    function P(rÃÑ::AbstractCoordinate, t::Unitful.Time, model::JefimenkoModel; rtol=__DEFAULT_RTOL)
        Ert = E(rÃÑ,t,model; rtol=rtol)
        Hrt = H(rÃÑ,t,model; rtol=rtol)
        return cross(Ert,Hrt) .|> W/m^2
    end

    """
        __P(rÃÑ::AbstractCoordinate, t::Time, source::JefimenkoSource, media::PropagationMedia; rtol)

    Calculate the predicted Poynting vector ùêè observed at space-time point (`rÃÑ`,`t`) due to
    a particular `source`, transmitted through a particular `propagation media`. Calculate
    the integral using a specified `relative tolerance`.

    # Arguments
    - `rÃÑ::UnitfulCoordinateSystems.AbstractCoordinate`: spatial location of the observation point
    - `t::Unitful.Time`: time at which the electric field is observed
    - `source::JefimenkoSource`: source of the electric field
    - `media::PropagationMedia`: properties of the propagation media

    # Keywords
    - `rtol::Real`: relative tolerance at which to solve the integral (optional)
    """
    function __P(rÃÑ::AbstractCoordinate, t::Unitful.Time, source::AbstractJefimenkoSource{T},
                media::AbstractPropagationMedia; rtol=__DEFAULT_RTOL) where {T<:AbstractFloat}
        Ert = __E(rÃÑ,t,source,media; rtol=rtol)
        Hrt = __H(rÃÑ,t,source,media; rtol=rtol)
        return cross(Ert,Hrt) .|> W/m^2
    end

    include("integrands.jl")
    include("fields_E.jl")
    include("fields_H.jl")

    export E, H, P
end
